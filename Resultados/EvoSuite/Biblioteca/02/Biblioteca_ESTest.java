/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 12 17:33:57 GMT 2024
 */

package imd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import imd.Biblioteca;
import imd.Livro;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Biblioteca_ESTest extends Biblioteca_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Biblioteca biblioteca0 = new Biblioteca("");
      Livro livro0 = new Livro("", ":I&/|Pj", 0, 0);
      livro0.adicionarCopias((-4510));
      biblioteca0.adicionarLivro(livro0);
      boolean boolean0 = biblioteca0.verificarDisponibilidade("");
      assertEquals(1, biblioteca0.getQuantidadeLivros());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Biblioteca biblioteca0 = new Biblioteca("j.r.rr3tGlkien");
      biblioteca0.popularBiblioteca();
      biblioteca0.adicionarLivro((Livro) null);
      biblioteca0.removerLivro((Livro) null);
      assertEquals(3, biblioteca0.getQuantidadeLivros());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Biblioteca biblioteca0 = new Biblioteca("");
      biblioteca0.popularBiblioteca();
      int int0 = biblioteca0.getQuantidadeLivros();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Biblioteca biblioteca0 = new Biblioteca((String) null);
      biblioteca0.getNome();
      assertEquals(0, biblioteca0.getQuantidadeLivros());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Biblioteca biblioteca0 = new Biblioteca("@Ycz~as");
      biblioteca0.getNome();
      assertEquals(0, biblioteca0.getQuantidadeLivros());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Biblioteca biblioteca0 = new Biblioteca("@Ycz~as");
      biblioteca0.popularBiblioteca();
      biblioteca0.buscarLivroPorTitulo("O Senhor dos An\u00E9is");
      assertEquals(3, biblioteca0.getQuantidadeLivros());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Biblioteca biblioteca0 = new Biblioteca("George Orwell");
      Livro livro0 = new Livro("# H1i.", "# H1i.", (-1104), (-1104));
      livro0.removerCopias((-2005315211));
      biblioteca0.adicionarLivro(livro0);
      biblioteca0.buscarLivroPorTitulo("# H1i.");
      assertEquals(1, biblioteca0.getQuantidadeLivros());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Biblioteca biblioteca0 = new Biblioteca("");
      Livro livro0 = new Livro("", ":I&/|Pj", 0, 0);
      livro0.adicionarCopias((-4510));
      biblioteca0.adicionarLivro(livro0);
      biblioteca0.buscarLivroPorTitulo("");
      assertEquals(1, biblioteca0.getQuantidadeLivros());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Biblioteca biblioteca0 = new Biblioteca("%6");
      Livro livro0 = new Livro((String) null, "%6", (-2940), (-2940));
      biblioteca0.adicionarLivro(livro0);
      // Undeclared exception!
      try { 
        biblioteca0.verificarDisponibilidade("%6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Biblioteca biblioteca0 = new Biblioteca(":l1^,Kxu$");
      biblioteca0.adicionarLivro((Livro) null);
      // Undeclared exception!
      try { 
        biblioteca0.buscarLivroPorTitulo("A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("imd.Biblioteca", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Biblioteca biblioteca0 = new Biblioteca("");
      Livro livro0 = new Livro("", ":I&/|Pj", 0, 0);
      biblioteca0.adicionarLivro(livro0);
      biblioteca0.buscarLivroPorTitulo("");
      assertEquals(1, biblioteca0.getQuantidadeLivros());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Biblioteca biblioteca0 = new Biblioteca("");
      biblioteca0.popularBiblioteca();
      biblioteca0.buscarLivroPorTitulo("");
      assertEquals(3, biblioteca0.getQuantidadeLivros());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Biblioteca biblioteca0 = new Biblioteca("");
      biblioteca0.popularBiblioteca();
      boolean boolean0 = biblioteca0.verificarDisponibilidade("1984");
      assertEquals(3, biblioteca0.getQuantidadeLivros());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Biblioteca biblioteca0 = new Biblioteca("");
      Livro livro0 = new Livro("", ":I&/|Pj", 0, 0);
      biblioteca0.adicionarLivro(livro0);
      boolean boolean0 = biblioteca0.verificarDisponibilidade("");
      assertEquals(1, biblioteca0.getQuantidadeLivros());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Biblioteca biblioteca0 = new Biblioteca("");
      biblioteca0.popularBiblioteca();
      boolean boolean0 = biblioteca0.verificarDisponibilidade("");
      assertEquals(3, biblioteca0.getQuantidadeLivros());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Biblioteca biblioteca0 = new Biblioteca("");
      biblioteca0.removerLivro((Livro) null);
      assertEquals(0, biblioteca0.getQuantidadeLivros());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Biblioteca biblioteca0 = new Biblioteca("");
      biblioteca0.getNome();
      assertEquals(0, biblioteca0.getQuantidadeLivros());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Biblioteca biblioteca0 = new Biblioteca(":l1^,Kxu$");
      int int0 = biblioteca0.getQuantidadeLivros();
      assertEquals(0, int0);
  }
}
